use phf::phf_map;
use std::{collections::HashMap, str::from_utf8};

use super::{conversion::hex_to_bytes, xor::xor_with_key};

static ASCII_FREQ: phf::Map<u8, f64> = phf_map! {
    32u8 => 0.167564443682168,
    101u8 => 0.08610229517681191,
    116u8 => 0.0632964962389326,
    97u8 => 0.0612553996079051,
    110u8 => 0.05503703643138501,
    105u8 => 0.05480626188138746,
    111u8 => 0.0541904405334676,
    115u8 => 0.0518864979648296,
    114u8 => 0.051525029341199825,
    108u8 => 0.03218192615049607,
    100u8 => 0.03188948073064199,
    104u8 => 0.02619237267611581,
    99u8 => 0.02500268898936656,
    10u8 => 0.019578060965172565,
    117u8 => 0.019247776378510318,
    109u8 => 0.018140172626462205,
    112u8 => 0.017362092874808832,
    102u8 => 0.015750347191785568,
    103u8 => 0.012804659959943725,
    46u8 => 0.011055184780313847,
    121u8 => 0.010893686962847832,
    98u8 => 0.01034644514338097,
    119u8 => 0.009565830104169261,
    44u8 => 0.008634492219614468,
    118u8 => 0.007819143740853554,
    48u8 => 0.005918945715880591,
    107u8 => 0.004945712204424292,
    49u8 => 0.004937789430804492,
    83u8 => 0.0030896915651553373,
    84u8 => 0.0030701064687671904,
    67u8 => 0.002987392712176473,
    50u8 => 0.002756237869045172,
    56u8 => 0.002552781042488694,
    53u8 => 0.0025269211093936652,
    65u8 => 0.0024774830020061096,
    57u8 => 0.002442242504945237,
    120u8 => 0.0023064144740073764,
    51u8 => 0.0021865587546870337,
    73u8 => 0.0020910417959267183,
    45u8 => 0.002076717421222119,
    54u8 => 0.0019199098857390264,
    52u8 => 0.0018385271551164353,
    55u8 => 0.0018243295447897528,
    77u8 => 0.0018134911904778657,
    66u8 => 0.0017387002075069484,
    34u8 => 0.0015754276887500987,
    39u8 => 0.0015078622753204398,
    80u8 => 0.00138908405321239,
    69u8 => 0.0012938206232079082,
    78u8 => 0.0012758834637326799,
    70u8 => 0.001220297284016159,
    82u8 => 0.0011037374385216535,
    68u8 => 0.0010927723198318497,
    85u8 => 0.0010426370083657518,
    113u8 => 0.00100853739070613,
    76u8 => 0.0010044809306127922,
    71u8 => 0.0009310209736100016,
    74u8 => 0.0008814561018445294,
    72u8 => 0.0008752446473266058,
    79u8 => 0.0008210528757671701,
    87u8 => 0.0008048270353938186,
    106u8 => 0.000617596049210692,
    122u8 => 0.0005762708620098124,
    47u8 => 0.000519607185080999,
    60u8 => 0.00044107665296153596,
    62u8 => 0.0004404428310719519,
    75u8 => 0.0003808001912620934,
    41u8 => 0.0003314254660634964,
    40u8 => 0.0003307916441739124,
    86u8 => 0.0002556203680692448,
    89u8 => 0.00025194420110965734,
    58u8 => 0.00012036277683200988,
    81u8 => 0.00010001709417636208,
};

pub fn character_freq_score(a: &[u8]) -> Option<f64> {
    // https://github.com/piersy/ascii-char-frequency-english/blob/main/ascii_freq.txt

    if !a
        .iter()
        .all(|b| b.is_ascii_graphic() || b.is_ascii_whitespace())
    {
        // println!("a contained non ASCII freq {:?}", a);
        return None;
    }

    let counts = a.iter().fold(HashMap::new(), |mut acc, c| {
        *acc.entry(c).or_insert(0) += 1;
        acc
    });

    Some(
        counts
            .into_iter()
            .map(|(key, obs)| {
                let exp = ASCII_FREQ.get(&key).unwrap_or(&0.0001) * a.len() as f64;
                (obs as f64 - exp).powi(2) / exp
            })
            .sum(),
    )
}

pub fn freq_analysis(bytes: &[u8]) -> Vec<(f64, u8, String)> {
    freq_analysis_iter(bytes).collect()
}

pub fn freq_analysis_iter(bytes: &[u8]) -> impl Iterator<Item = (f64, u8, String)> + '_ {
    (0..255)
        .map(|key| {
            let c = xor_with_key(bytes, key);
            let score = character_freq_score(&c);
            (score, key, c)
        })
        .filter(|(score, _, _)| score.is_some())
        .map(|(score, key, c)| {
            (
                score.unwrap(),
                key,
                from_utf8(&c).unwrap_or("Bad string").to_owned(),
            )
        })
}

pub fn most_likely_encoded(strs: Vec<&str>) -> (f64, u8, String) {
    strs.iter()
        .map(hex_to_bytes)
        .map(|f| f.unwrap())
        .flat_map(|f| freq_analysis(&f))
        .min_by(|a: &(f64, u8, String), b| a.0.partial_cmp(&b.0).unwrap())
        .unwrap()
}
